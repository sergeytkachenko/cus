module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var l=t[r]={i:r,l:!1,exports:{}};return e[r].call(l.exports,l,l.exports,n),l.l=!0,l.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(r,l,function(t){return e[t]}.bind(null,l));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class r{static generateUnique(e,t=window){if(!(e instanceof t.Element))return;const n=[];let l=e;for(;l.nodeType===Node.ELEMENT_NODE;){let o=l.nodeName.toLowerCase(),i=r._getIdSelector(l),c=r._getClassesSelector(l),s=r._getAttributesSelector(l),u=r._getChildSelector(l),a=`${r._getSiblingSelector(l,t)}${o}${i}${c}${s}${u}`,f=r._concatSelectors(n,i);if(r._checkOnlyOneExistEl(f,e,t))return f;let E=r._concatSelectors(n,c);if(r._checkOnlyOneExistEl(E,e,t))return E;let _=r._concatSelectors(n,s);if(r._checkOnlyOneExistEl(_,e,t))return _;let d=r._concatSelectors(n,a);if(r._checkOnlyOneExistEl(d,e,t))return d;if("body"===o){const n=r._generateUniqueByPrev(e,t);if(n)return n}n.unshift(a),l=l.parentNode}return n.join(" > ")}static _concatSelectors(e,t){let n=e.join(" > ");return n&&t?`${t} > ${n}`:t}static _generateUniqueByPrev(e,t){let n=e.previousElementSibling;const l=[];for(;n&&n.nodeType===Node.ELEMENT_NODE;){let e=r._getPrevUnique(n.nextElementSibling,t);if(e)return l.unshift(e),l.join(" + ");let o=n.nodeName.toLowerCase(),i=r._getIdSelector(n),c=r._getClassesSelector(n),s=r._getAttributesSelector(n);const u=i||c||s||o;l.unshift(u),n=n.previousElementSibling}return null}static _getPrevUnique(e,t){const n=e.previousElementSibling;if(!n||n.nodeType!==Node.ELEMENT_NODE)return null;let l=e.nodeName.toLowerCase(),o=r._getIdSelector(e),i=r._getClassesSelector(e),c=r._getAttributesSelector(e);const s=o||i||c||l;let u=r._generateUnique(n,t),a=`${u} + ${s}`;if(u&&r._checkOnlyOneExistEl(a,e,t))return a;const f=`${l}${o}${i}${c}`;return r._checkOnlyOneExistEl(f,e,t)?f:null}static _generateUnique(e,t){if(!(e instanceof t.Element))return;const n=[];let l=e;for(;l.nodeType===Node.ELEMENT_NODE;){let o=l.nodeName.toLowerCase(),i=r._getIdSelector(l),c=r._getClassesSelector(l),s=r._getAttributesSelector(l),u=`${o}${i}${c}${s}`;if(r._checkOnlyOneExistEl(i,e,t)){n.unshift(i);break}if(r._checkOnlyOneExistEl(c,e,t)){n.unshift(c);break}if(r._checkOnlyOneExistEl(s,e,t)){n.unshift(s);break}if(r._checkOnlyOneExistEl(u,e,t)){n.unshift(u);break}l=l.parentNode}return n.join(" > ")}static _getIdSelector(e){const t=r._trustedSelector(e.id);return t?`#${t}`:""}static _getClassesSelector(e){return`.${Object.values(e.classList).map(e=>(e=e.trim(),e=r._trustedSelector(e))).filter(e=>Boolean(e)).join(".")}`}static _getAttributesSelector(e){let t=Array.from(e.attributes).filter(e=>{let t=e.name,n=e.value;if(n=r._trustedSelector(n),t=r._trustedSelector(t),""===n||""===t)return!1;const l="class"!==t&&"id"!==t&&"style"!==t&&!t.startsWith("on"),o=parseInt(n).toString()!==n;return l&&o&&"href"!==t});if(t.length){return t.map(e=>`[${e.name}="${e.value}"]`).join("")}return""}static _getChildSelector(e){let t=e.previousElementSibling;const n=e.nextElementSibling;return t&&t.nodeType===Node.ELEMENT_NODE?n&&n.nodeType===Node.ELEMENT_NODE?"":":last-child":":first-child"}static _getSiblingSelector(e,t){const n=[];let l=e.previousElementSibling;for(;l&&l.nodeType===Node.ELEMENT_NODE;){let e=`${l.nodeName.toLowerCase()}${r._getIdSelector(l)}${r._getClassesSelector(l)}${r._getAttributesSelector(l)}${r._getChildSelector(l)}`;n.unshift(e);let o=n.join(" + ");if(r._isOnlyOneExistEl(o,t))return`${o} + `;l=l.previousElementSibling}return n.length?`${n.join(" + ")} + `:""}static _checkOnlyOneExistEl(e,t,n){let r=[];try{r=e&&n.document.querySelectorAll(e)}catch(e){}return 1===r.length&&r[0]===t}static _isOnlyOneExistEl(e,t){let n=[];try{n=e&&t.document.querySelectorAll(e)}catch(e){}return 1===n.length}static _isTrustedSelector(e){return!/[0-9]{3,}/.test(e)}static _trustedSelector(e){return r._isTrustedSelector(e)?e:""}}var l=r;class o{static generateUnique(e,t=window){if(!(e instanceof t.Element)||"BODY"===e.tagName)return;const n=[];for(;e.nodeType===Node.ELEMENT_NODE&&"BODY"!==e.tagName;){let r=e.nodeName.toLowerCase(),l=o._getAttributesSelector(e),i=o._getTextSelector(e);n.unshift(`${r}${l}${i}`);let c=`//${n.join("/")}`;const s=t.document.evaluate(c,t.document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;if(n.length&&s===e)break;e=e.parentNode}return`//${n.join("/")}`}static _getAttributesSelector(e){let t=Array.from(e.attributes).filter(e=>{let t=e.name;return"style"!==t&&"href"!==t});if(t.length){return t.map(e=>`[@${e.name}="${e.value}"]`).join("")}return""}static _getTextSelector(e){const t=e.outerText;if(!t)return null;return`[contains(text(), '${t.slice(0,50).replace(/['\)\(,\[\]]/g,"\\$1")}')]`}}var i=o;function c(e,t){return t.forEach(t=>{e=e.replace(new RegExp(t,"g"),"")}),e}t.default={generateUniqueSelector(e,t=window,n=[]){const r=l.generateUnique(e,t);if(r)return c(r,n);const o=i.generateUnique(e,t);return o.startsWith("//html")?null:c(o,n)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,